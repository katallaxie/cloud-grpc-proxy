// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: api/mapping.proto

package annotations

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Lambda struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Qualifier    string `protobuf:"bytes,2,opt,name=qualifier,proto3" json:"qualifier,omitempty"`
}

func (x *Lambda) Reset() {
	*x = Lambda{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lambda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lambda) ProtoMessage() {}

func (x *Lambda) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lambda.ProtoReflect.Descriptor instead.
func (*Lambda) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *Lambda) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Lambda) GetQualifier() string {
	if x != nil {
		return x.Qualifier
	}
	return ""
}

type DynamoDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*DynamoDB_GetItem
	//	*DynamoDB_PutItem
	//	*DynamoDB_UpdateItem
	//	*DynamoDB_DeleteItem
	//	*DynamoDB_Query
	//	*DynamoDB_Scan
	Input isDynamoDB_Input `protobuf_oneof:"input"`
}

func (x *DynamoDB) Reset() {
	*x = DynamoDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB) ProtoMessage() {}

func (x *DynamoDB) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB.ProtoReflect.Descriptor instead.
func (*DynamoDB) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1}
}

func (m *DynamoDB) GetInput() isDynamoDB_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *DynamoDB) GetGetItem() *DynamoDB_GetItemInput {
	if x, ok := x.GetInput().(*DynamoDB_GetItem); ok {
		return x.GetItem
	}
	return nil
}

func (x *DynamoDB) GetPutItem() *DynamoDB_PutItemInput {
	if x, ok := x.GetInput().(*DynamoDB_PutItem); ok {
		return x.PutItem
	}
	return nil
}

func (x *DynamoDB) GetUpdateItem() *DynamoDB_UpdateItemInput {
	if x, ok := x.GetInput().(*DynamoDB_UpdateItem); ok {
		return x.UpdateItem
	}
	return nil
}

func (x *DynamoDB) GetDeleteItem() *DynamoDB_DeleteItemInput {
	if x, ok := x.GetInput().(*DynamoDB_DeleteItem); ok {
		return x.DeleteItem
	}
	return nil
}

func (x *DynamoDB) GetQuery() *DynamoDB_QueryInput {
	if x, ok := x.GetInput().(*DynamoDB_Query); ok {
		return x.Query
	}
	return nil
}

func (x *DynamoDB) GetScan() *DynamoDB_ScanInput {
	if x, ok := x.GetInput().(*DynamoDB_Scan); ok {
		return x.Scan
	}
	return nil
}

type isDynamoDB_Input interface {
	isDynamoDB_Input()
}

type DynamoDB_GetItem struct {
	GetItem *DynamoDB_GetItemInput `protobuf:"bytes,1,opt,name=GetItem,proto3,oneof"`
}

type DynamoDB_PutItem struct {
	PutItem *DynamoDB_PutItemInput `protobuf:"bytes,2,opt,name=PutItem,proto3,oneof"`
}

type DynamoDB_UpdateItem struct {
	UpdateItem *DynamoDB_UpdateItemInput `protobuf:"bytes,3,opt,name=UpdateItem,proto3,oneof"`
}

type DynamoDB_DeleteItem struct {
	DeleteItem *DynamoDB_DeleteItemInput `protobuf:"bytes,4,opt,name=DeleteItem,proto3,oneof"`
}

type DynamoDB_Query struct {
	Query *DynamoDB_QueryInput `protobuf:"bytes,5,opt,name=Query,proto3,oneof"`
}

type DynamoDB_Scan struct {
	Scan *DynamoDB_ScanInput `protobuf:"bytes,6,opt,name=Scan,proto3,oneof"`
}

func (*DynamoDB_GetItem) isDynamoDB_Input() {}

func (*DynamoDB_PutItem) isDynamoDB_Input() {}

func (*DynamoDB_UpdateItem) isDynamoDB_Input() {}

func (*DynamoDB_DeleteItem) isDynamoDB_Input() {}

func (*DynamoDB_Query) isDynamoDB_Input() {}

func (*DynamoDB_Scan) isDynamoDB_Input() {}

type SQS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueUrl string `protobuf:"bytes,1,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
}

func (x *SQS) Reset() {
	*x = SQS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQS) ProtoMessage() {}

func (x *SQS) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQS.ProtoReflect.Descriptor instead.
func (*SQS) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *SQS) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

type MSK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapServer []string `protobuf:"bytes,1,rep,name=bootstrap_server,json=bootstrapServer,proto3" json:"bootstrap_server,omitempty"`
}

func (x *MSK) Reset() {
	*x = MSK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSK) ProtoMessage() {}

func (x *MSK) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSK.ProtoReflect.Descriptor instead.
func (*MSK) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{3}
}

func (x *MSK) GetBootstrapServer() []string {
	if x != nil {
		return x.BootstrapServer
	}
	return nil
}

type Kinesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamArn string `protobuf:"bytes,1,opt,name=stream_arn,json=streamArn,proto3" json:"stream_arn,omitempty"`
}

func (x *Kinesis) Reset() {
	*x = Kinesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kinesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kinesis) ProtoMessage() {}

func (x *Kinesis) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kinesis.ProtoReflect.Descriptor instead.
func (*Kinesis) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{4}
}

func (x *Kinesis) GetStreamArn() string {
	if x != nil {
		return x.StreamArn
	}
	return ""
}

type Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	// Types that are assignable to Pattern:
	//	*Services_Lambda
	//	*Services_Dynamodb
	//	*Services_Sqs
	//	*Services_Msk
	//	*Services_Kinesis
	Pattern isServices_Pattern `protobuf_oneof:"pattern"`
}

func (x *Services) Reset() {
	*x = Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services) ProtoMessage() {}

func (x *Services) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services.ProtoReflect.Descriptor instead.
func (*Services) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{5}
}

func (x *Services) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (m *Services) GetPattern() isServices_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (x *Services) GetLambda() *Lambda {
	if x, ok := x.GetPattern().(*Services_Lambda); ok {
		return x.Lambda
	}
	return nil
}

func (x *Services) GetDynamodb() *DynamoDB {
	if x, ok := x.GetPattern().(*Services_Dynamodb); ok {
		return x.Dynamodb
	}
	return nil
}

func (x *Services) GetSqs() *SQS {
	if x, ok := x.GetPattern().(*Services_Sqs); ok {
		return x.Sqs
	}
	return nil
}

func (x *Services) GetMsk() *MSK {
	if x, ok := x.GetPattern().(*Services_Msk); ok {
		return x.Msk
	}
	return nil
}

func (x *Services) GetKinesis() *Kinesis {
	if x, ok := x.GetPattern().(*Services_Kinesis); ok {
		return x.Kinesis
	}
	return nil
}

type isServices_Pattern interface {
	isServices_Pattern()
}

type Services_Lambda struct {
	Lambda *Lambda `protobuf:"bytes,2,opt,name=lambda,proto3,oneof"`
}

type Services_Dynamodb struct {
	Dynamodb *DynamoDB `protobuf:"bytes,3,opt,name=dynamodb,proto3,oneof"`
}

type Services_Sqs struct {
	Sqs *SQS `protobuf:"bytes,4,opt,name=sqs,proto3,oneof"`
}

type Services_Msk struct {
	Msk *MSK `protobuf:"bytes,5,opt,name=msk,proto3,oneof"`
}

type Services_Kinesis struct {
	Kinesis *Kinesis `protobuf:"bytes,6,opt,name=kinesis,proto3,oneof"`
}

func (*Services_Lambda) isServices_Pattern() {}

func (*Services_Dynamodb) isServices_Pattern() {}

func (*Services_Sqs) isServices_Pattern() {}

func (*Services_Msk) isServices_Pattern() {}

func (*Services_Kinesis) isServices_Pattern() {}

type DynamoDB_AttributValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B    []byte                             `protobuf:"bytes,1,opt,name=B,proto3" json:"B,omitempty"`
	BOOL bool                               `protobuf:"varint,2,opt,name=BOOL,proto3" json:"BOOL,omitempty"`
	BS   [][]byte                           `protobuf:"bytes,3,rep,name=BS,proto3" json:"BS,omitempty"`
	L    []*DynamoDB_AttributValue          `protobuf:"bytes,4,rep,name=L,proto3" json:"L,omitempty"`
	M    map[string]*DynamoDB_AttributValue `protobuf:"bytes,5,rep,name=M,proto3" json:"M,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	N    string                             `protobuf:"bytes,6,opt,name=N,proto3" json:"N,omitempty"`
	NS   []string                           `protobuf:"bytes,7,rep,name=NS,proto3" json:"NS,omitempty"`
	NULL bool                               `protobuf:"varint,8,opt,name=NULL,proto3" json:"NULL,omitempty"`
	S    string                             `protobuf:"bytes,9,opt,name=S,proto3" json:"S,omitempty"`
	SS   []string                           `protobuf:"bytes,10,rep,name=SS,proto3" json:"SS,omitempty"`
}

func (x *DynamoDB_AttributValue) Reset() {
	*x = DynamoDB_AttributValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_AttributValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_AttributValue) ProtoMessage() {}

func (x *DynamoDB_AttributValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_AttributValue.ProtoReflect.Descriptor instead.
func (*DynamoDB_AttributValue) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DynamoDB_AttributValue) GetB() []byte {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *DynamoDB_AttributValue) GetBOOL() bool {
	if x != nil {
		return x.BOOL
	}
	return false
}

func (x *DynamoDB_AttributValue) GetBS() [][]byte {
	if x != nil {
		return x.BS
	}
	return nil
}

func (x *DynamoDB_AttributValue) GetL() []*DynamoDB_AttributValue {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *DynamoDB_AttributValue) GetM() map[string]*DynamoDB_AttributValue {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *DynamoDB_AttributValue) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *DynamoDB_AttributValue) GetNS() []string {
	if x != nil {
		return x.NS
	}
	return nil
}

func (x *DynamoDB_AttributValue) GetNULL() bool {
	if x != nil {
		return x.NULL
	}
	return false
}

func (x *DynamoDB_AttributValue) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *DynamoDB_AttributValue) GetSS() []string {
	if x != nil {
		return x.SS
	}
	return nil
}

type DynamoDB_GetItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributesToGet          []string                           `protobuf:"bytes,1,rep,name=AttributesToGet,proto3" json:"AttributesToGet,omitempty"`
	ConsistentRead           bool                               `protobuf:"varint,2,opt,name=ConsistentRead,proto3" json:"ConsistentRead,omitempty"`
	ExpressionAttributeNames map[string]string                  `protobuf:"bytes,3,rep,name=ExpressionAttributeNames,proto3" json:"ExpressionAttributeNames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                      map[string]*DynamoDB_AttributValue `protobuf:"bytes,4,rep,name=Key,proto3" json:"Key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProjectionExpression     string                             `protobuf:"bytes,5,opt,name=ProjectionExpression,proto3" json:"ProjectionExpression,omitempty"`
	ReturnConsumedCapacity   string                             `protobuf:"bytes,6,opt,name=ReturnConsumedCapacity,proto3" json:"ReturnConsumedCapacity,omitempty"`
	TableName                string                             `protobuf:"bytes,7,opt,name=TableName,proto3" json:"TableName,omitempty"`
}

func (x *DynamoDB_GetItemInput) Reset() {
	*x = DynamoDB_GetItemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_GetItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_GetItemInput) ProtoMessage() {}

func (x *DynamoDB_GetItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_GetItemInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_GetItemInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 1}
}

func (x *DynamoDB_GetItemInput) GetAttributesToGet() []string {
	if x != nil {
		return x.AttributesToGet
	}
	return nil
}

func (x *DynamoDB_GetItemInput) GetConsistentRead() bool {
	if x != nil {
		return x.ConsistentRead
	}
	return false
}

func (x *DynamoDB_GetItemInput) GetExpressionAttributeNames() map[string]string {
	if x != nil {
		return x.ExpressionAttributeNames
	}
	return nil
}

func (x *DynamoDB_GetItemInput) GetKey() map[string]*DynamoDB_AttributValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DynamoDB_GetItemInput) GetProjectionExpression() string {
	if x != nil {
		return x.ProjectionExpression
	}
	return ""
}

func (x *DynamoDB_GetItemInput) GetReturnConsumedCapacity() string {
	if x != nil {
		return x.ReturnConsumedCapacity
	}
	return ""
}

func (x *DynamoDB_GetItemInput) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type DynamoDB_PutItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName                   string                             `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`
	ReturnValues                string                             `protobuf:"bytes,2,opt,name=ReturnValues,proto3" json:"ReturnValues,omitempty"`
	ReturnItemCollectionMetrics string                             `protobuf:"bytes,3,opt,name=ReturnItemCollectionMetrics,proto3" json:"ReturnItemCollectionMetrics,omitempty"`
	ReturnConsumedCapacity      string                             `protobuf:"bytes,4,opt,name=ReturnConsumedCapacity,proto3" json:"ReturnConsumedCapacity,omitempty"`
	ConditionExpression         string                             `protobuf:"bytes,5,opt,name=ConditionExpression,proto3" json:"ConditionExpression,omitempty"`
	ConditionalOperator         string                             `protobuf:"bytes,6,opt,name=ConditionalOperator,proto3" json:"ConditionalOperator,omitempty"`
	ExpressionAttributeNames    map[string]string                  `protobuf:"bytes,7,rep,name=ExpressionAttributeNames,proto3" json:"ExpressionAttributeNames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExpressionAttributeValues   map[string]*DynamoDB_AttributValue `protobuf:"bytes,8,rep,name=ExpressionAttributeValues,proto3" json:"ExpressionAttributeValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DynamoDB_PutItemInput) Reset() {
	*x = DynamoDB_PutItemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_PutItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_PutItemInput) ProtoMessage() {}

func (x *DynamoDB_PutItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_PutItemInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_PutItemInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 2}
}

func (x *DynamoDB_PutItemInput) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetReturnValues() string {
	if x != nil {
		return x.ReturnValues
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetReturnItemCollectionMetrics() string {
	if x != nil {
		return x.ReturnItemCollectionMetrics
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetReturnConsumedCapacity() string {
	if x != nil {
		return x.ReturnConsumedCapacity
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetConditionalOperator() string {
	if x != nil {
		return x.ConditionalOperator
	}
	return ""
}

func (x *DynamoDB_PutItemInput) GetExpressionAttributeNames() map[string]string {
	if x != nil {
		return x.ExpressionAttributeNames
	}
	return nil
}

func (x *DynamoDB_PutItemInput) GetExpressionAttributeValues() map[string]*DynamoDB_AttributValue {
	if x != nil {
		return x.ExpressionAttributeValues
	}
	return nil
}

type DynamoDB_UpdateItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName                   string            `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`
	ReturnValues                string            `protobuf:"bytes,2,opt,name=ReturnValues,proto3" json:"ReturnValues,omitempty"`
	ReturnItemCollectionMetrics string            `protobuf:"bytes,3,opt,name=ReturnItemCollectionMetrics,proto3" json:"ReturnItemCollectionMetrics,omitempty"`
	ConditionExpression         string            `protobuf:"bytes,4,opt,name=ConditionExpression,proto3" json:"ConditionExpression,omitempty"`
	ConditionalOperator         string            `protobuf:"bytes,5,opt,name=ConditionalOperator,proto3" json:"ConditionalOperator,omitempty"`
	ReturnConsumedCapacity      string            `protobuf:"bytes,6,opt,name=ReturnConsumedCapacity,proto3" json:"ReturnConsumedCapacity,omitempty"`
	ExpressionAttributeNames    map[string]string `protobuf:"bytes,7,rep,name=ExpressionAttributeNames,proto3" json:"ExpressionAttributeNames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExpressionAttributeValues   map[string]string `protobuf:"bytes,8,rep,name=ExpressionAttributeValues,proto3" json:"ExpressionAttributeValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateExpression            string            `protobuf:"bytes,9,opt,name=UpdateExpression,proto3" json:"UpdateExpression,omitempty"`
}

func (x *DynamoDB_UpdateItemInput) Reset() {
	*x = DynamoDB_UpdateItemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_UpdateItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_UpdateItemInput) ProtoMessage() {}

func (x *DynamoDB_UpdateItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_UpdateItemInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_UpdateItemInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 3}
}

func (x *DynamoDB_UpdateItemInput) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetReturnValues() string {
	if x != nil {
		return x.ReturnValues
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetReturnItemCollectionMetrics() string {
	if x != nil {
		return x.ReturnItemCollectionMetrics
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetConditionalOperator() string {
	if x != nil {
		return x.ConditionalOperator
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetReturnConsumedCapacity() string {
	if x != nil {
		return x.ReturnConsumedCapacity
	}
	return ""
}

func (x *DynamoDB_UpdateItemInput) GetExpressionAttributeNames() map[string]string {
	if x != nil {
		return x.ExpressionAttributeNames
	}
	return nil
}

func (x *DynamoDB_UpdateItemInput) GetExpressionAttributeValues() map[string]string {
	if x != nil {
		return x.ExpressionAttributeValues
	}
	return nil
}

func (x *DynamoDB_UpdateItemInput) GetUpdateExpression() string {
	if x != nil {
		return x.UpdateExpression
	}
	return ""
}

type DynamoDB_DeleteItemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DynamoDB_DeleteItemInput) Reset() {
	*x = DynamoDB_DeleteItemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_DeleteItemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_DeleteItemInput) ProtoMessage() {}

func (x *DynamoDB_DeleteItemInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_DeleteItemInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_DeleteItemInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 4}
}

type DynamoDB_QueryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DynamoDB_QueryInput) Reset() {
	*x = DynamoDB_QueryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_QueryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_QueryInput) ProtoMessage() {}

func (x *DynamoDB_QueryInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_QueryInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_QueryInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 5}
}

type DynamoDB_ScanInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DynamoDB_ScanInput) Reset() {
	*x = DynamoDB_ScanInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mapping_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDB_ScanInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB_ScanInput) ProtoMessage() {}

func (x *DynamoDB_ScanInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_mapping_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB_ScanInput.ProtoReflect.Descriptor instead.
func (*DynamoDB_ScanInput) Descriptor() ([]byte, []int) {
	return file_api_mapping_proto_rawDescGZIP(), []int{1, 6}
}

var File_api_mapping_proto protoreflect.FileDescriptor

var file_api_mapping_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x22,
	0x4b, 0x0a, 0x06, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd4, 0x16, 0x0a,
	0x08, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x61,
	0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x61, 0x7a,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e,
	0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6d,
	0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44,
	0x42, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x46, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x1a, 0xd6, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x53,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x02, 0x42, 0x53, 0x12, 0x30, 0x0a, 0x01, 0x4c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x4c, 0x12, 0x37, 0x0a, 0x01,
	0x4d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x01, 0x4d, 0x12, 0x0c, 0x0a, 0x01, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x4e, 0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x53, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x4e, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x0c, 0x0a, 0x01, 0x53, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x53, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x02, 0x53, 0x53, 0x1a, 0x58, 0x0a, 0x06, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xce, 0x04, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x47, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x7b, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x44, 0x42, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xea, 0x05, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x7b, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x7e,
	0x0a, 0x19, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x19, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4b,
	0x0a, 0x1d, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x1e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfc, 0x05,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x7e, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x4b, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c,
	0x0a, 0x1e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x11, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x0c, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x0a,
	0x09, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x22, 0x0a, 0x03, 0x53, 0x51, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x30, 0x0a, 0x03, 0x4d, 0x53, 0x4b, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x07, 0x4b, 0x69, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x72, 0x6e, 0x22, 0x8e, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x44, 0x42, 0x48, 0x00, 0x52, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x12, 0x23,
	0x0a, 0x03, 0x73, 0x71, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6d,
	0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x51, 0x53, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x71, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x53,
	0x4b, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x61, 0x7a,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x42, 0x44, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x61, 0x77, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_mapping_proto_rawDescOnce sync.Once
	file_api_mapping_proto_rawDescData = file_api_mapping_proto_rawDesc
)

func file_api_mapping_proto_rawDescGZIP() []byte {
	file_api_mapping_proto_rawDescOnce.Do(func() {
		file_api_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_mapping_proto_rawDescData)
	})
	return file_api_mapping_proto_rawDescData
}

var file_api_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_mapping_proto_goTypes = []interface{}{
	(*Lambda)(nil),                   // 0: amazon.api.Lambda
	(*DynamoDB)(nil),                 // 1: amazon.api.DynamoDB
	(*SQS)(nil),                      // 2: amazon.api.SQS
	(*MSK)(nil),                      // 3: amazon.api.MSK
	(*Kinesis)(nil),                  // 4: amazon.api.Kinesis
	(*Services)(nil),                 // 5: amazon.api.Services
	(*DynamoDB_AttributValue)(nil),   // 6: amazon.api.DynamoDB.AttributValue
	(*DynamoDB_GetItemInput)(nil),    // 7: amazon.api.DynamoDB.GetItemInput
	(*DynamoDB_PutItemInput)(nil),    // 8: amazon.api.DynamoDB.PutItemInput
	(*DynamoDB_UpdateItemInput)(nil), // 9: amazon.api.DynamoDB.UpdateItemInput
	(*DynamoDB_DeleteItemInput)(nil), // 10: amazon.api.DynamoDB.DeleteItemInput
	(*DynamoDB_QueryInput)(nil),      // 11: amazon.api.DynamoDB.QueryInput
	(*DynamoDB_ScanInput)(nil),       // 12: amazon.api.DynamoDB.ScanInput
	nil,                              // 13: amazon.api.DynamoDB.AttributValue.MEntry
	nil,                              // 14: amazon.api.DynamoDB.GetItemInput.ExpressionAttributeNamesEntry
	nil,                              // 15: amazon.api.DynamoDB.GetItemInput.KeyEntry
	nil,                              // 16: amazon.api.DynamoDB.PutItemInput.ExpressionAttributeNamesEntry
	nil,                              // 17: amazon.api.DynamoDB.PutItemInput.ExpressionAttributeValuesEntry
	nil,                              // 18: amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeNamesEntry
	nil,                              // 19: amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeValuesEntry
}
var file_api_mapping_proto_depIdxs = []int32{
	7,  // 0: amazon.api.DynamoDB.GetItem:type_name -> amazon.api.DynamoDB.GetItemInput
	8,  // 1: amazon.api.DynamoDB.PutItem:type_name -> amazon.api.DynamoDB.PutItemInput
	9,  // 2: amazon.api.DynamoDB.UpdateItem:type_name -> amazon.api.DynamoDB.UpdateItemInput
	10, // 3: amazon.api.DynamoDB.DeleteItem:type_name -> amazon.api.DynamoDB.DeleteItemInput
	11, // 4: amazon.api.DynamoDB.Query:type_name -> amazon.api.DynamoDB.QueryInput
	12, // 5: amazon.api.DynamoDB.Scan:type_name -> amazon.api.DynamoDB.ScanInput
	0,  // 6: amazon.api.Services.lambda:type_name -> amazon.api.Lambda
	1,  // 7: amazon.api.Services.dynamodb:type_name -> amazon.api.DynamoDB
	2,  // 8: amazon.api.Services.sqs:type_name -> amazon.api.SQS
	3,  // 9: amazon.api.Services.msk:type_name -> amazon.api.MSK
	4,  // 10: amazon.api.Services.kinesis:type_name -> amazon.api.Kinesis
	6,  // 11: amazon.api.DynamoDB.AttributValue.L:type_name -> amazon.api.DynamoDB.AttributValue
	13, // 12: amazon.api.DynamoDB.AttributValue.M:type_name -> amazon.api.DynamoDB.AttributValue.MEntry
	14, // 13: amazon.api.DynamoDB.GetItemInput.ExpressionAttributeNames:type_name -> amazon.api.DynamoDB.GetItemInput.ExpressionAttributeNamesEntry
	15, // 14: amazon.api.DynamoDB.GetItemInput.Key:type_name -> amazon.api.DynamoDB.GetItemInput.KeyEntry
	16, // 15: amazon.api.DynamoDB.PutItemInput.ExpressionAttributeNames:type_name -> amazon.api.DynamoDB.PutItemInput.ExpressionAttributeNamesEntry
	17, // 16: amazon.api.DynamoDB.PutItemInput.ExpressionAttributeValues:type_name -> amazon.api.DynamoDB.PutItemInput.ExpressionAttributeValuesEntry
	18, // 17: amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeNames:type_name -> amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeNamesEntry
	19, // 18: amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeValues:type_name -> amazon.api.DynamoDB.UpdateItemInput.ExpressionAttributeValuesEntry
	6,  // 19: amazon.api.DynamoDB.AttributValue.MEntry.value:type_name -> amazon.api.DynamoDB.AttributValue
	6,  // 20: amazon.api.DynamoDB.GetItemInput.KeyEntry.value:type_name -> amazon.api.DynamoDB.AttributValue
	6,  // 21: amazon.api.DynamoDB.PutItemInput.ExpressionAttributeValuesEntry.value:type_name -> amazon.api.DynamoDB.AttributValue
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_mapping_proto_init() }
func file_api_mapping_proto_init() {
	if File_api_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lambda); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kinesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_AttributValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_GetItemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_PutItemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_UpdateItemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_DeleteItemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_QueryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mapping_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDB_ScanInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_mapping_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DynamoDB_GetItem)(nil),
		(*DynamoDB_PutItem)(nil),
		(*DynamoDB_UpdateItem)(nil),
		(*DynamoDB_DeleteItem)(nil),
		(*DynamoDB_Query)(nil),
		(*DynamoDB_Scan)(nil),
	}
	file_api_mapping_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Services_Lambda)(nil),
		(*Services_Dynamodb)(nil),
		(*Services_Sqs)(nil),
		(*Services_Msk)(nil),
		(*Services_Kinesis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_mapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mapping_proto_goTypes,
		DependencyIndexes: file_api_mapping_proto_depIdxs,
		MessageInfos:      file_api_mapping_proto_msgTypes,
	}.Build()
	File_api_mapping_proto = out.File
	file_api_mapping_proto_rawDesc = nil
	file_api_mapping_proto_goTypes = nil
	file_api_mapping_proto_depIdxs = nil
}
